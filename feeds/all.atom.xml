<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Exploring Microbes</title><link href="https://wegnerce.github.io/" rel="alternate"></link><link href="https://wegnerce.github.io/feeds/all.atom.xml" rel="self"></link><id>https://wegnerce.github.io/</id><updated>2017-10-13T00:00:00+02:00</updated><entry><title>Sneak peek at QIIME2</title><link href="https://wegnerce.github.io/blog/sneak-qiime2/" rel="alternate"></link><published>2017-10-13T00:00:00+02:00</published><updated>2017-10-13T00:00:00+02:00</updated><author><name>Carl-Eric</name></author><id>tag:wegnerce.github.io,2017-10-13:/blog/sneak-qiime2/</id><summary type="html">&lt;p&gt;Having a look at the current pre-release of QIIME2&lt;/p&gt;</summary><content type="html">&lt;style&gt;
body {
text-align: justify}
&lt;/style&gt;

&lt;h2&gt;Oh QIIME my love&lt;/h2&gt;
&lt;p&gt;I did my master in a bioinformatics lab, I was the wet-lab guy, I did not get in touch with any coding. When I was still going to school I was coding a lot (especially QBasic and TurboPascal). However after I left school I kind of lost it. This changed when I started my PhD. When I got my first amplicon / ribo-tag datasets I was confronted with the issue &lt;em&gt;what next&lt;/em&gt;? In our lab there was another, more advanced, senior phd student and he introduced me to &lt;em&gt;QIIME&lt;/em&gt;. It was love the first sight. Working with &lt;em&gt;QIIME&lt;/em&gt; sparked my interest to familiarize myself with &lt;em&gt;Python&lt;/em&gt; (surprise, love at first sight again), which I used/use a lot to write, what I call "glue code" to customize things. The thing that I liked the most about &lt;em&gt;QIIME&lt;/em&gt; when using it first was that you can easily generate a lot of OK looking figures as output of your analyses - being it community profiles, rarefaction curves, or three-dimensional ordinations (I still remember the first lab meeting where I showed three-dimensional PCoAs from QIIME - it was great ;-)). Moreover, QIIME is for me a prime example for open source software being developed with a lot of input from the community in a very transparent way. Over the years, I used QIIME a lot and it is still is one of my "work horses".&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;a href="http://qiime.org/" style="border:none !important;"&gt;&lt;img src="/images/qiime2.svg" alt="QIIME" align="middle" style="width: 250px;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;A matter of believe, or what about mothur?&lt;/h3&gt;
&lt;p&gt;When you are dealing with amplicon sequencing data there is of course not only &lt;em&gt;QIIME&lt;/em&gt;. It is only a matter of time until you come across &lt;em&gt;mothur&lt;/em&gt; as well, and these two are supposedly the most commonly used tools for amplicon data analysis, besides from less wide-spread alternatives such as &lt;a href="https://www.arb-silva.de/ngs/"&gt;&lt;em&gt;SILVA ngs&lt;/em&gt;&lt;/a&gt;. When you browse the web you find plenty of forum and blog entries discussing the pro's and con's of &lt;em&gt;mothur&lt;/em&gt; and &lt;em&gt;QIIME&lt;/em&gt; and often it appears as if choosing one is an almost religious decision shaping your bioinformatic future as microbial ecologist. Yes, I myself use &lt;em&gt;QIIME&lt;/em&gt;, but if our lab would have used &lt;em&gt;mothur&lt;/em&gt; I would have probably ended up using &lt;em&gt;mothurs&lt;/em&gt;. Yes, sometimes it is that simple, in my former department I was basically a matter of office - there were &lt;em&gt;mothur&lt;/em&gt; offices next to &lt;em&gt;QIIME&lt;/em&gt; offices and there were constant discussions why one is better than the other. Personally I think it is important to note that &lt;em&gt;mothur&lt;/em&gt; and &lt;em&gt;QIIME&lt;/em&gt; are fundamentally different in their conceptualization. &lt;em&gt;Mothur&lt;/em&gt; is a stand-alone tool with many re-implemented tools. The crucial point here is “re-implemented”, meaning that original tools are ported to C++ and optimized for speed, parallelization etc.. When you run the rdp classifiier or uchime from within &lt;em&gt;mothur&lt;/em&gt; you are not running the original code, but the mothur's team re-implementation of it. This concept gives &lt;em&gt;mothur&lt;/em&gt; in comparison to &lt;em&gt;QIIME&lt;/em&gt; a significant edge if hardware resources are limited. &lt;em&gt;QIIME&lt;/em&gt; on the other hand is first of all written in &lt;em&gt;Python&lt;/em&gt;. &lt;em&gt;Python&lt;/em&gt; is in comparison to C++ an interpreted language (while C++ is mostly directly compiled), meaning &lt;em&gt;Python&lt;/em&gt; code is by default much slower when executed than C++ code. Moreover, &lt;em&gt;QIIME&lt;/em&gt; is in comparison to mothur rather a framework embedding a lot of tools but not re-implementing them. Given that &lt;em&gt;QIIME&lt;/em&gt; is written in &lt;em&gt;Python&lt;/em&gt; and given that &lt;em&gt;Python&lt;/em&gt; is really easy to learn, &lt;em&gt;QIIME&lt;/em&gt; functions can be rather easily modified and customized. &lt;em&gt;QIIME&lt;/em&gt; is developed by a rather big team, while &lt;em&gt;mothur&lt;/em&gt; is maintained by only two people (which is stunning). I do not want to say that any of the two is better than the other, if you interested in differences between &lt;em&gt;QIIME&lt;/em&gt; and &lt;em&gt;mothur&lt;/em&gt; check out the links below. Stay open-minded and if you have time take both for a spin.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;a href="https://www.mothur.org/" style="border:none !important;"&gt;&lt;img src="/images/mothur.png" alt="Mothur" align="middle" style="width: 250px;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/qiime-forum/vDuBwVF7rOg"&gt;An entry from the QIIME forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.mothur.org/2016/01/12/mothur-and-qiime/"&gt;A blog post by Pat Schloss&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Raising the curtain - QIIME2&lt;/h3&gt;
&lt;p&gt;Enough jibber-jabber. Over the years the very active &lt;em&gt;QIIME&lt;/em&gt; developers added a lot of functionality to &lt;em&gt;QIIME&lt;/em&gt;. With the most recent releases of &lt;em&gt;QIIME&lt;/em&gt; I started to have the feeling that it was getting a bit messy. I'm not sure when the actual development of &lt;em&gt;QIIME2&lt;/em&gt; started but the very first alpha release came out in time for &lt;a href="https://github.com/qiime2/qiime2/releases/tag/2.0.1"&gt;SciPy 2016&lt;/a&gt;. Meanwhile, approx. 15 months later the &lt;em&gt;QIIME2&lt;/em&gt; development is extremely advanced and the current pre-release is 2017.9. So far I have not really touched &lt;em&gt;QIIME2&lt;/em&gt; but with this pre-lease I finally took a look. OK, let's have a quick overview of &lt;em&gt;QIIME2&lt;/em&gt; key features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a plugin-based system to easily implement new functions &lt;/li&gt;
&lt;li&gt;provenance of generated data (probably one of the coolest new features as it supports reproducibilty and tracking of analyses in general)&lt;/li&gt;
&lt;li&gt;multiple denoising functions (&lt;a href="https://benjjneb.github.io/dada2/tutorial.html"&gt;dada2&lt;/a&gt; and &lt;a href="https://github.com/biocore/deblur"&gt;deblur&lt;/a&gt;, that directly refers to the ongoing ASV vs. OTU debate, more about that in a different blog post)&lt;/li&gt;
&lt;li&gt;a new feature-classifier plugin based on supervised learning (also something for another blog post)&lt;/li&gt;
&lt;li&gt;and many more...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Setting up QIIME2&lt;/h3&gt;
&lt;p&gt;Alright, let's install &lt;em&gt;QIIME2&lt;/em&gt; and take it for a ride. Like &lt;em&gt;QIIME1&lt;/em&gt;, &lt;em&gt;QIIME2&lt;/em&gt; is extremely well documented. Nevertheless, setting up &lt;em&gt;QIIME1&lt;/em&gt; could be a pain. Especially because of dependencies that required certain versions, which easily caused collisions with other software. Using virtual environments made this a lot easier. &lt;em&gt;QIIME2&lt;/em&gt; follows a new strategy. The last couple of years saw a lot of developments with respect to virtualization (e.g. &lt;a href="http://www.docker.com"&gt;docker&lt;/a&gt; to name one). When I looked up the installation instructions for &lt;em&gt;QIIME2&lt;/em&gt; I was quite sure to find instructions based on a &lt;em&gt;Python's&lt;/em&gt; virtualenv/venv modules. But nope, &lt;a href="https://anaconda.org/"&gt;&lt;em&gt;Anaconda&lt;/em&gt;&lt;/a&gt; it is. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Anaconda&lt;/em&gt; is a &lt;em&gt;Python&lt;/em&gt; distribution focussing on scientific work and big data analyses. It recently became rather popular due to its &lt;a href="https://bioconda.github.io/"&gt;&lt;em&gt;bioconda&lt;/em&gt;&lt;/a&gt; software channel, which facilitates the deployment of diverse bioinformatic software - neat. Nevertheless, I was not fully happy when I read that &lt;em&gt;QIIME2&lt;/em&gt; makes use of &lt;em&gt;Anaconda&lt;/em&gt;. I simply prefer virtual environments, however I can understand the reasoning given that &lt;em&gt;QIIME2&lt;/em&gt; relies on &lt;a href="https://raw.githubusercontent.com/qiime2/environment-files/master/2017.9/release/qiime2-2017.9-conda-linux-64.txt"&gt;211&lt;/a&gt; (!!) dependencies, including &lt;em&gt;Python&lt;/em&gt; modules, &lt;em&gt;R&lt;/em&gt; packages, standalone tools and general linux libraries. The &lt;em&gt;QIIME&lt;/em&gt; developers also over a &lt;em&gt;Docker&lt;/em&gt; image in case you prefer that over &lt;em&gt;Anaconda&lt;/em&gt; (true for me).&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;a href="https://bioconda.github.io/" style="border:none !important;"&gt;&lt;img src="/images/bioconda.png" alt="Bioconda" align="middle" style="width: 250px;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Playing around&lt;/h3&gt;
&lt;p&gt;With &lt;em&gt;QIIME2&lt;/em&gt; set up I just started to play around. I had a look at the available tutorials, and I decided to do the &lt;a href="https://docs.qiime2.org/2017.9/tutorials/moving-pictures/"&gt;"Moving pictures"&lt;/a&gt; one. If you are familiar with &lt;em&gt;QIIME1&lt;/em&gt; the transition to &lt;em&gt;QIIME2&lt;/em&gt; is extremely easy. When I started working with the files I had moment of panick when I came along the first .qza file. I thought "Oh no, a proprietary, closed file format. But of course I was wrong. &lt;em&gt;QIIME2&lt;/em&gt; produces two kind of output files &lt;em&gt;QIIME&lt;/em&gt; artifacts (.qza) and &lt;em&gt;QIIME&lt;/em&gt; visualizations (.qzv). What is really cool is that you can view both kind of files without a &lt;em&gt;QIIME_installation by just going to &lt;a href="https://view.qiime2.org/"&gt;https://view.qiime2.org/&lt;/a&gt;. This is a great feature for sharing data with collaborators. Both file types appear to be archives that contain always provenance information in form of .yaml files. _QIIME&lt;/em&gt; artifacts can be also grouped according to &lt;a href="https://docs.qiime2.org/2017.9/semantic-types/"&gt;semantic types&lt;/a&gt; (e.g. FeatureTable or DistanceMatrix).&lt;/p&gt;
&lt;p&gt;The "Moving pictures" tutorial is great as you get to know a lot of different plugins (e.g. qiime demux for sequence demultiplexing and sequence statistics), the command-line interface of all plugins feels familiar to &lt;em&gt;QIIME1&lt;/em&gt; and smoothens the transition from &lt;em&gt;QIIME1&lt;/em&gt; to &lt;em&gt;QIIME2&lt;/em&gt; a lot. As I have the feeling that I get carried away, I finish it off with some screenshots.&lt;/p&gt;
&lt;p&gt;Here we go, hello again 3D PCoA.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/images/qiime2_emperor.png" alt="Hello again 3D PCoA." align="middle" style="width: 650px;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The implemented provenance information will favor responsibility.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/images/qiime2_provenance.png" alt="The implemented provenance information will favor responsibility." align="middle" style="width: 650px;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;You can export figures from visualizations as .svg. That's a super handy feature, making publication-ready figures easy with some polishing for instance in &lt;em&gt;Inkscape&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/images/qiime2_bar.png" alt="You can export figures from visualizations as .svg." align="middle" style="width: 650px;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;See you&lt;/p&gt;
&lt;p&gt;Carl-Eric&lt;/p&gt;</content><category term="bioinformatics"></category><category term="python"></category></entry><entry><title>Disqus and pelican-bootstrap3</title><link href="https://wegnerce.github.io/blog/disqus-pelican-bootstrap3/" rel="alternate"></link><published>2017-10-04T00:00:00+02:00</published><updated>2017-10-04T00:00:00+02:00</updated><author><name>Carl-Eric</name></author><id>tag:wegnerce.github.io,2017-10-04:/blog/disqus-pelican-bootstrap3/</id><summary type="html">&lt;p&gt;Quickly setting up disqus in pelican-bootstrap3&lt;/p&gt;</summary><content type="html">&lt;style&gt;
body {
text-align: justify}
&lt;/style&gt;

&lt;h2&gt;Pelican is plain awesome&lt;/h2&gt;
&lt;p&gt;After moving my site recently from &lt;em&gt;weebly&lt;/em&gt;, I'm still extremely satisfied with &lt;em&gt;pelican&lt;/em&gt; and &lt;em&gt;github&lt;/em&gt; pages. What I presumably like the most is the fact that &lt;em&gt;pelican&lt;/em&gt; is extremely modular in a way that you can easily incorporate functions. It's for instance extremely easy to activate and implement &lt;em&gt;disqus&lt;/em&gt; to add comment sections for blog entries and static pages. &lt;/p&gt;
&lt;h3&gt;Setting the stage&lt;/h3&gt;
&lt;p&gt;Ok, first things first, I wanted to add a &lt;em&gt;disqus&lt;/em&gt; comment section to my blog entries. I signed up at &lt;a href="https://disqus.com"&gt;&lt;em&gt;disqus&lt;/em&gt;&lt;/a&gt; and added my site. During the set up process you are asked whether you are using any popular platform such as &lt;em&gt;weebly&lt;/em&gt; or &lt;em&gt;WordPress&lt;/em&gt;. &lt;em&gt;Pelican&lt;/em&gt; is not listed though (see below). I selected the last option (that is the "universal code") and proceeded. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/images/disqus_1.jpg" alt="Setting up disqus" align="middle" style="width: 650px;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Next I a configured &lt;em&gt;disqus&lt;/em&gt; to the best of my knowledge, adding basic information (see below).&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/images/disqus_2.jpg" alt="Setting up disqus" align="middle" style="width: 650px;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Remember, that I selected the universal code option during the set up? The cool thing is that we do not need this universal code at all - yes no playing around with html or anything. We just need to add the variable DISQUS_SITENAME = "your_disqus_domain" to our pelicanconf.py, easy. &lt;em&gt;Disqus&lt;/em&gt; is simply hardwired in &lt;em&gt;pelican&lt;/em&gt; for a lot of themes. Check your theme folder and have a look at /templates/includes/footer.html. You will see &lt;em&gt;disqus&lt;/em&gt; is ready to be implemented.&lt;/p&gt;
&lt;h3&gt;Fixing &lt;em&gt;disqus&lt;/em&gt; for &lt;em&gt;pelican-bootstrap3&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;After re-building my site (&lt;a href="http://docs.getpelican.com/en/3.6.3/publish.html"&gt;&lt;em&gt;fabric&lt;/em&gt;&lt;/a&gt; is great when you are actively working on your &lt;em&gt;pelican&lt;/em&gt; page) I tested the now incorporated &lt;em&gt;disqus&lt;/em&gt; comment function, but there was an error saying that &lt;em&gt;disqus&lt;/em&gt; could not be loaded. Hm, how to deal with this unexpected obstacle? &lt;em&gt;Disqus&lt;/em&gt; works out of the box almost every &lt;em&gt;pelican&lt;/em&gt; theme. A quick &lt;em&gt;google&lt;/em&gt; search revealed that this is a known problem with &lt;em&gt;pelican-bootstrap3&lt;/em&gt;. Following &lt;a href="https://github.com/DandyDev/pelican-bootstrap3/issues/219"&gt;these instructions&lt;/a&gt; resolved the issue and... tada a comment section is included for all my blog posts - success.&lt;/p&gt;
&lt;p&gt;See you&lt;/p&gt;
&lt;p&gt;Carl-Eric&lt;/p&gt;</content><category term="pelican"></category><category term="web"></category><category term="github"></category></entry><entry><title>Add a custom domain to a GitHub page</title><link href="https://wegnerce.github.io/blog/domain-github-page/" rel="alternate"></link><published>2017-09-25T00:00:00+02:00</published><updated>2017-09-25T00:00:00+02:00</updated><author><name>Carl-Eric</name></author><id>tag:wegnerce.github.io,2017-09-25:/blog/domain-github-page/</id><summary type="html">&lt;p&gt;Short instructions to add a custom domain to a GitHub page&lt;/p&gt;</summary><content type="html">&lt;style&gt;
body {
text-align: justify}
&lt;/style&gt;

&lt;h2&gt;A custom domain&lt;/h2&gt;
&lt;p&gt;&lt;a href=""&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt; pages are a great way to host personal, organization, and work-related pages. I recently moved my own webpage from &lt;a href="https://www.weebly.com"&gt;&lt;em&gt;weebly&lt;/em&gt;&lt;/a&gt; to &lt;a href="https://github.com"&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt;, however my domain (www.exploringmicrobes.de) was still linked to my previous &lt;em&gt;weebly&lt;/em&gt; page. The question I was confronted with was, how to move the domain and use it as custom domain for my &lt;em&gt;GitHub&lt;/em&gt; page? I outline the steps I did in the following. Please note I wanted to use &lt;em&gt;cloudflare&lt;/em&gt; as reverse proxy.&lt;/p&gt;
&lt;h3&gt;Create a CNAME file&lt;/h3&gt;
&lt;p&gt;In the &lt;em&gt;GitHub&lt;/em&gt; repository hosting your &lt;em&gt;pelican&lt;/em&gt; generated page (I guess that equally applied to &lt;em&gt;jekyll&lt;/em&gt; pages) create a CNAME file only containing your domain (see below).&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/images/CNAME.png" alt="A CNAME file" align="middle" style="width: 650px;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Add you domain to cloudflare&lt;/h3&gt;
&lt;p&gt;Create a &lt;a href="https://www.cloudflare.com"&gt;&lt;em&gt;cloudflare&lt;/em&gt;&lt;/a&gt; account and add your domain (see below). The subsequent scan takes something like one, two minutes. You see existing records. Edit the entries so that there are two A records referring to 192.30.252.153 and 192.30.252.154, next add a CNAME record with www as alias resolving to your github page (yourusername.gitub.io).&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="/images/cloudflare.png" alt="Adding a domain to cloudflare" align="middle" style="width: 650px;"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Change the nameservers of your registrar&lt;/h3&gt;
&lt;p&gt;Continuing the setup, &lt;em&gt;cloudflare&lt;/em&gt; will tell you how to change the nameservers of your registrar (for me &lt;em&gt;weebly&lt;/em&gt;). Afterwards it takes few hours until nameserver changes are effective.&lt;/p&gt;
&lt;p&gt;That's it, maybe the outlined steps are useful for people setting up similar &lt;em&gt;GitHub&lt;/em&gt; pages.&lt;/p&gt;
&lt;p&gt;See you&lt;/p&gt;
&lt;p&gt;Carl-Eric&lt;/p&gt;</content><category term="pelican"></category><category term="web"></category><category term="github"></category></entry><entry><title>Kicking it off</title><link href="https://wegnerce.github.io/blog/kicking-it-off/" rel="alternate"></link><published>2017-09-22T00:00:00+02:00</published><updated>2017-09-22T00:00:00+02:00</updated><author><name>Carl-Eric</name></author><id>tag:wegnerce.github.io,2017-09-22:/blog/kicking-it-off/</id><summary type="html">&lt;p&gt;First blog post after moving the page from weebly to pelican.&lt;/p&gt;</summary><content type="html">&lt;style&gt;
body {
text-align: justify}
&lt;/style&gt;

&lt;h2&gt;It happened...&lt;/h2&gt;
&lt;p&gt;... i finally re-did my little page. When I decided to set up my page, I wanted it to be quick and if possible visually appealing. I had a look into &lt;a href="https://de.wordpress.com/"&gt;&lt;em&gt;WordPress&lt;/em&gt;&lt;/a&gt;, but apparently &lt;em&gt;WordPress&lt;/em&gt; is meanwhile a little bit bloated and rather slow, so I decided against it (although it is for sure a great platform). I heard good things about &lt;a href="https://www.weebly.com/"&gt;&lt;em&gt;weebly&lt;/em&gt;&lt;/a&gt;, I also know a couple of colleagues using it and I liked the look of many &lt;em&gt;weebly&lt;/em&gt; pages.&lt;/p&gt;
&lt;p&gt;Long story short, I picked &lt;em&gt;weebly&lt;/em&gt; and I was also rather happy with it. The online interface is really intuitive and within little time I ended up with a result I liked. However, after a couple of weeks I kind of hit a wall. Although &lt;em&gt;weebly&lt;/em&gt; offers plenty of plugins it is not so easy to implement simple things like code boxes etc.. I should definitely have spent more time on checking out alternatives besides from popular content management systems (but I didn't - my own fault).&lt;/p&gt;
&lt;p&gt;As a result I started to look into static site generators. There are a couple of them out there, with the most popular probably being &lt;a href="https://jekyllrb.com/"&gt;&lt;em&gt;jekyll&lt;/em&gt;&lt;/a&gt;. As &lt;em&gt;python&lt;/em&gt; person I checked out &lt;a href="https://blog.getpelican.com/"&gt;&lt;em&gt;pelican&lt;/em&gt;&lt;/a&gt; and more or less fell in love with it immediately and you see the outcome of it in front of you.&lt;/p&gt;
&lt;p&gt;In future I hope to regularly post about insights from my work, myself trying out new ideas in terms of bioinformatics, teaching, and daily life at a German university.&lt;/p&gt;
&lt;p&gt;See you soon&lt;/p&gt;
&lt;p&gt;Carl-Eric&lt;/p&gt;</content><category term="pelican"></category><category term="python"></category><category term="web"></category></entry></feed>